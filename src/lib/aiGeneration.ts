import { z } from 'zod';

// Sch√©mas pour le nouveau format d√©taill√© bas√© sur votre exemple exact
const ScriptStepSchema = z.object({
  segment: z.string(),
  narration: z.string(),
  code: z.string().optional(),
  video_reference: z.string()
});

const LabNGCSchema = z.object({
  title: z.string(),
  instructions: z.string(),
  steps: z.array(z.string()),
  starter_code: z.string(),
  solution_code: z.string()
});

const LineExplanationSchema = z.object({
  line: z.string(),
  explanation: z.string()
});

const ProjectSchema = z.object({
  title: z.string(),
  brief: z.string(),
  criteria: z.array(z.string()),
  steps: z.array(z.string()),
  line_by_line_explanation: z.array(LineExplanationSchema),
  sample_code: z.string()
});

const LessonSchema = z.object({
  script: z.array(ScriptStepSchema),
  lab_ngc: LabNGCSchema,
  project: ProjectSchema,
  estimated_duration_minutes: z.number()
});

const LessonVersionSchema = z.object({
  version: z.string(),
  meta: z.object({
    assumptions: z.array(z.string())
  }),
  executive_summary: z.string(),
  lesson: LessonSchema
});

const ThreeVersionsSchema = z.object({
  version1_basique: LessonVersionSchema,
  version2_intermediaire: LessonVersionSchema,
  version3_creative: LessonVersionSchema
});

export interface ContentGenerationRequest {
  topic: string;
  targetAudience: string;
  prerequisites: string[];
  estimatedDuration: number;
}

export interface ContentGenerationResponse {
  version1_basique: LessonVersion;
  version2_intermediaire: LessonVersion;
  version3_creative: LessonVersion;
}

export interface LessonVersion {
  version: string;
  meta: {
    assumptions: string[];
  };
  executive_summary: string;
  lesson: {
    script: ScriptStep[];
    lab_ngc: LabNGC;
    project: Project;
    estimated_duration_minutes: number;
  };
}

export interface ScriptStep {
  segment: string;
  narration: string;
  code?: string;
  video_reference: string;
}

export interface LabNGC {
  title: string;
  instructions: string;
  steps: string[];
  starter_code: string;
  solution_code: string;
}

export interface Project {
  title: string;
  brief: string;
  criteria: string[];
  steps: string[];
  line_by_line_explanation: LineExplanation[];
  sample_code: string;
}

export interface LineExplanation {
  line: string;
  explanation: string;
}

export async function callAzureOpenAI(
  messages: Array<{ role: string; content: string }>,
  maxTokens = 4000,
  temperature = 0.7
): Promise<string> {
  try {
    // V√©rifier si on est c√¥t√© serveur (dans une API route)
    const isServerSide = typeof window === 'undefined';
    
    if (isServerSide) {
      // Appel direct √† Azure OpenAI c√¥t√© serveur
      const azureEndpoint = process.env.AZURE_OPENAI_ENDPOINT;
      const azureApiKey = process.env.AZURE_OPENAI_API_KEY;
      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4o';
      const apiVersion = process.env.AZURE_OPENAI_API_VERSION || '2024-04-01-preview';

      if (!azureEndpoint || !azureApiKey) {
        throw new Error('Variables d\'environnement Azure OpenAI manquantes');
      }

      // Construire l'URL Azure OpenAI
      const url = `${azureEndpoint}/openai/deployments/${deploymentName}/chat/completions?api-version=${apiVersion}`;

      console.log('üîó Appel direct Azure OpenAI c√¥t√© serveur:', url);

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'api-key': azureApiKey,
        },
        body: JSON.stringify({
          messages,
          max_tokens: maxTokens,
          temperature,
          stream: false,
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Erreur Azure OpenAI:', response.status, errorData);
        throw new Error(`Azure OpenAI API error: ${response.status} - ${errorData}`);
      }

      const data = await response.json();
      console.log('‚úÖ R√©ponse re√ßue d\'Azure OpenAI');
      return data.choices?.[0]?.message?.content || '';
      
    } else {
      // Appel via notre API route c√¥t√© client
      const response = await fetch('/api/chat/azure', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages,
          max_tokens: maxTokens,
          temperature,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Azure OpenAI API error:', errorData);
        throw new Error(`Azure OpenAI API error: ${response.status} - ${errorData.message || 'Unknown error'}`);
      }

      const data = await response.json();
      return data.choices?.[0]?.message?.content || '';
    }
  } catch (error) {
    console.error('Error calling Azure OpenAI:', error);
    throw error;
  }
}

export async function generateSkillPathContent({
  topic,
  targetAudience,
  prerequisites,
  estimatedDuration
}: ContentGenerationRequest): Promise<ContentGenerationResponse> {
  const currentDate = new Date().toLocaleString('fr-FR', { timeZone: 'Europe/Paris' });
  
  const systemPrompt = `Tu es une IA experte en cr√©ation de contenu p√©dagogique interactif, style Scrimba, pour l'apprentissage du d√©veloppement web. Ton objectif est de g√©n√©rer **trois versions distinctes** d'un JSON conforme au sch√©ma sp√©cifi√© pour une le√ßon donn√©e, bas√© sur les donn√©es fournies. Chaque version doit √™tre unique (variations dans le style, la complexit√©, les sc√©narios du projet/lab/challenges), couvrir tous les concepts de la le√ßon, et respecter les dur√©es minimales suivantes :

- Version 1 (Basique) : 3 heures minimum (180 minutes), contenu simple pour d√©butants absolus.
- Version 2 (Interm√©diaire) : 6 heures minimum (360 minutes), contenu enrichi avec exemples complexes.
- Version 3 (Cr√©ative) : 10 heures minimum (600 minutes), contenu cr√©atif avec projets th√©matiques.

**La narration (script) doit √™tre la partie la plus longue**, occupant 60-70% du temps total estim√© dans chaque version, avec des explications d√©taill√©es, des exemples concrets, et des analogies. Le contenu doit √™tre clair, conversationnel, engageant, et favoriser un apprentissage actif avec des pauses pour des challenges interactifs. Utilise une voix professionnelle, masculine, et motivante, comme un formateur exp√©riment√©.

### Instructions g√©n√©rales :
- **Langue** : Fran√ßais, ton accessible mais technique, adapt√© aux d√©butants.
- **Contexte** : La le√ßon fait partie d'un parcours p√©dagogique structur√© (skill path).
- **Validit√©** : Chaque JSON doit √™tre syntaxiquement correct, avec des cha√Ænes √©chapp√©es (ex. : \\n pour les sauts de ligne).
- **Narration vid√©o** :
  - Chaque segment du script doit inclure une narration explicative, d√©taill√©e, parfaite, style Scrimba (conversationnel, motivant).
  - Dur√©e par segment : 3 √† 15 minutes (100-150 mots/min pour un discours clair).
  - Narration : Inclut exemples concrets, analogies, appels √† l'action (ex. : "Pause ! Essayez ceci‚Ä¶").
  - **Narration dominante** : La narration (script) repr√©sente 60-70% du temps total estim√©.
- **Dur√©e estim√©e** :
  - **Version 1** : ‚â•180 min, narration ~110-125 min, challenges 20 min, lab 20 min, quiz 10 min, projet 20 min.
  - **Version 2** : ‚â•360 min, narration ~220-250 min, challenges 40 min, lab 30 min, quiz 15 min, projet 25 min.
  - **Version 3** : ‚â•600 min, narration ~360-420 min, challenges 60 min, lab 40 min, quiz 20 min, projet 30 min.
- **Trois versions** :
  - **Version 1 (Basique)** : Style simple, exemples minimalistes, projet/lab accessibles, narrations tr√®s d√©taill√©es.
  - **Version 2 (Interm√©diaire)** : Style engageant, exemples riches, projet/lab plus complexes, narrations pratiques.
  - **Version 3 (Cr√©ative)** : Style dynamique, exemples th√©matiques (ex. : site de mus√©e), projet/lab avanc√©s, narrations inspirantes.

### Sch√©ma JSON attendu EXACTEMENT :
{
  "version1_basique": {
    "version": "basique",
    "meta": {
      "assumptions": ["hypoth√®ses sur le niveau des apprenants"]
    },
    "executive_summary": "r√©sum√© en 2-3 phrases adapt√© au style",
    "lesson": {
      "script": [
        {
          "segment": "nom du segment",
          "narration": "narration explicative 3-15 min, style Scrimba conversationnel",
          "code": "code d'exemple √©chapp√© avec \\n (optionnel)",
          "video_reference": "r√©f√©rence vid√©o"
        }
      ],
      "lab_ngc": {
        "title": "titre du laboratoire",
        "instructions": "instructions d√©taill√©es",
        "steps": ["√©tapes d√©taill√©es"],
        "starter_code": "code de d√©part √©chapp√© avec \\n",
        "solution_code": "code solution complet √©chapp√© avec \\n"
      },
      "project": {
        "title": "titre du projet",
        "brief": "description du projet et lien avec concepts",
        "criteria": ["4-6 crit√®res couvrant tous les concepts"],
        "steps": ["√©tapes d√©taill√©es pour guider l'apprenant"],
        "line_by_line_explanation": [
          {
            "line": "ligne de code √©chapp√©e",
            "explanation": "explication reli√©e au concept"
          }
        ],
        "sample_code": "code complet valid√© √©chapp√© avec \\n"
      },
      "estimated_duration_minutes": 180
    }
  },
  "version2_intermediaire": {
    "version": "interm√©diaire",
    "meta": {
      "assumptions": ["hypoth√®ses niveau interm√©diaire"]
    },
    "executive_summary": "r√©sum√© style interm√©diaire",
    "lesson": {
      "script": [
        {
          "segment": "segment interm√©diaire 1",
          "narration": "narration d√©taill√©e version interm√©diaire",
          "code": "code d'exemple",
          "video_reference": "video_ref_2"
        }
      ],
      "lab_ngc": {
        "title": "laboratoire interm√©diaire",
        "instructions": "instructions plus complexes",
        "steps": ["√©tapes interm√©diaires"],
        "starter_code": "code starter interm√©diaire",
        "solution_code": "solution interm√©diaire"
      },
      "project": {
        "title": "projet interm√©diaire",
        "brief": "description projet interm√©diaire",
        "criteria": ["crit√®res interm√©diaires"],
        "steps": ["√©tapes projet interm√©diaire"],
        "line_by_line_explanation": [{"line": "code", "explanation": "explication"}],
        "sample_code": "code exemple interm√©diaire"
      },
      "estimated_duration_minutes": 360
    }
  },
  "version3_creative": {
    "version": "cr√©ative",
    "meta": {
      "assumptions": ["hypoth√®ses approche cr√©ative"]
    },
    "executive_summary": "r√©sum√© style cr√©atif",
    "lesson": {
      "script": [
        {
          "segment": "segment cr√©atif 1",
          "narration": "narration cr√©ative d√©taill√©e",
          "code": "code cr√©atif",
          "video_reference": "video_ref_3"
        }
      ],
      "lab_ngc": {
        "title": "laboratoire cr√©atif",
        "instructions": "instructions cr√©atives",
        "steps": ["√©tapes cr√©atives"],
        "starter_code": "code starter cr√©atif",
        "solution_code": "solution cr√©ative"
      },
      "project": {
        "title": "projet cr√©atif th√©matique",
        "brief": "description projet cr√©atif",
        "criteria": ["crit√®res cr√©atifs"],
        "steps": ["√©tapes projet cr√©atif"],
        "line_by_line_explanation": [{"line": "code", "explanation": "explication"}],
        "sample_code": "code exemple cr√©atif"
      },
      "estimated_duration_minutes": 600
    }
  }
}

### Instructions sp√©cifiques :
1. **script** : 8-24 segments selon la version, narration dominante (60-70% du temps total)
2. **lab_ngc** : Instructions avec √©tapes claires, starter_code minimal, solution_code complet
3. **project** : Brief d√©crivant l'objectif, 4-6 crit√®res, √©tapes d√©taill√©es, explications ligne par ligne
4. **meta.assumptions** : Liste les hypoth√®ses (niveau, outils, pr√©requis)

IMPORTANT : Retourne UNIQUEMENT le JSON valide, sans texte avant ou apr√®s. AUCUN commentaire JavaScript (/* */ ou //) n'est autoris√© dans le JSON. √âcris le contenu complet pour toutes les versions sans utiliser de raccourcis. Utilise la date actuelle (${currentDate}) pour contextualiser. Assure-toi que chaque version respecte les dur√©es minimales et que la narration est dominante.`;

  const userPrompt = `G√©n√®re du contenu d'apprentissage pour :
- Sujet : ${topic}
- Public cible : ${targetAudience}
- Pr√©requis : ${prerequisites.join(', ')}
- Dur√©e estim√©e de base : ${estimatedDuration} minutes

Cr√©e 3 versions distinctes (basique ‚â•180min, interm√©diaire ‚â•360min, cr√©ative ‚â•600min) avec narration dominante et projets th√©matiques diff√©rents. Respecte exactement le sch√©ma JSON fourni.`;

  try {
    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ];

    console.log('Appel √† Azure OpenAI avec le prompt...');
    const response = await callAzureOpenAI(messages, 6000, 0.7);
    
    console.log('R√©ponse brute de l\'IA:', response.substring(0, 500) + '...');

    // Nettoyer la r√©ponse pour extraire le JSON
    let cleanResponse = response.trim();
    
    // Retirer les balises de code si pr√©sentes
    if (cleanResponse.startsWith('```json') || cleanResponse.startsWith('```')) {
      cleanResponse = cleanResponse.replace(/^```(?:json)?\s*/, '').replace(/```\s*$/, '');
    }
    
    // Retirer tout texte avant le premier {
    const firstBrace = cleanResponse.indexOf('{');
    if (firstBrace > 0) {
      cleanResponse = cleanResponse.substring(firstBrace);
    }

    // Retirer tout texte apr√®s le dernier }
    const lastBrace = cleanResponse.lastIndexOf('}');
    if (lastBrace < cleanResponse.length - 1) {
      cleanResponse = cleanResponse.substring(0, lastBrace + 1);
    }

    console.log('JSON nettoy√©:', cleanResponse.substring(0, 500) + '...');

    // Parser le JSON
    let parsedResponse;
    try {
      parsedResponse = JSON.parse(cleanResponse);
    } catch (parseError) {
      console.error('Erreur de parsing JSON:', parseError);
      console.log('Contenu qui a caus√© l\'erreur:', cleanResponse);
      throw new Error(`Erreur de parsing JSON: ${parseError}`);
    }

    // Valider avec Zod
    const validated = ThreeVersionsSchema.parse(parsedResponse);
    console.log('Contenu valid√© avec succ√®s');

    return validated as ContentGenerationResponse;

  } catch (error) {
    console.error('üí• ERREUR CRITIQUE lors de la g√©n√©ration de contenu:', error);
    
    // Plus de fallback - erreur explicite pour forcer la r√©solution du probl√®me
    if (error instanceof Error && error.message.includes('Azure OpenAI')) {
      throw new Error(`üîó Erreur de connexion Azure OpenAI: ${error.message}. V√©rifiez vos variables d'environnement AZURE_OPENAI_*`);
    }
    
    if (error instanceof Error && error.message.includes('JSON')) {
      throw new Error(`üìù Erreur de parsing JSON de l'IA: ${error.message}. L'IA n'a pas retourn√© un JSON valide.`);
    }
    
    throw new Error(`‚ùå Impossible de g√©n√©rer le contenu: ${error instanceof Error ? error.message : 'Erreur inconnue'}. Pas de fallback disponible.`);
  }
}
