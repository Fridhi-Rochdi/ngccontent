import { generateObject } from 'ai';
import { createAzure } from '@ai-sdk/azure';
import { z } from 'zod';

// Configuration du mod√®le Azure OpenAI
const azure = createAzure({
  baseURL: process.env.AZURE_OPENAI_ENDPOINT!,
  apiKey: process.env.AZURE_OPENAI_API_KEY!,
});

// Sch√©mas pour le nouveau format d√©taill√©
const ScriptStepSchema = z.object({
  segment: z.string(),
  narration: z.string(),
  code: z.string().optional(),
  video_reference: z.string()
});

const InteractiveChallengeSchema = z.object({
  id: z.string(),
  title: z.string(),
  instructions: z.string(),
  starter_code: z.string(),
  solution_code: z.string()
});

const LabNGCSchema = z.object({
  title: z.string(),
  instructions: z.string(),
  starter_code: z.string(),
  solution_code: z.string(),
  steps: z.array(z.string())
});

const QuizSchema = z.object({
  multiple_choice: z.array(z.object({
    question: z.string(),
    options: z.array(z.string()),
    correct_answer: z.string()
  })),
  open_ended: z.object({
    question: z.string(),
    sample_answer: z.string()
  })
});

const ProjectSchema = z.object({
  title: z.string(),
  brief: z.string(),
  criteria: z.array(z.string()),
  steps: z.array(z.string()),
  line_by_line_explanation: z.array(z.object({
    line: z.string(),
    explanation: z.string()
  })),
  sample_code: z.string()
});

const LessonContentSchema = z.object({
  id: z.string(),
  title: z.string(),
  objective: z.string(),
  script: z.array(ScriptStepSchema),
  interactive_challenges: z.array(InteractiveChallengeSchema),
  lab_ngc: LabNGCSchema,
  quiz: QuizSchema,
  project: ProjectSchema,
  estimated_duration_minutes: z.number()
});

const LessonVersionSchema = z.object({
  version: z.string(),
  meta: z.object({
    assumptions: z.array(z.string())
  }),
  executive_summary: z.string(),
  lesson: LessonContentSchema
});

// Sch√©ma pour contenir les trois versions
const ThreeVersionsSchema = z.object({
  version1_basique: LessonVersionSchema,
  version2_intermediaire: LessonVersionSchema,
  version3_creative: LessonVersionSchema
});

// Interface pour la compatibilit√© avec l'ancien code
export interface LessonVersion {
  title: string;
  duration: number;
  level: string;
  content: any;
}

/**
 * G√©n√®re le contenu d'une le√ßon avec l'IA Azure OpenAI
 */
export async function generateLessonContent(
  topicTitle: string,
  topicDescription: string,
  context: string = ''
): Promise<LessonVersion[]> {
  console.log('üöÄ G√©n√©ration du contenu pour:', topicTitle);

  try {
    const lessonData = {
      title: topicTitle,
      description: topicDescription,
      concepts: [
        {
          title: topicTitle,
          videos_scrimba: ["scrimba-intro-1", "scrimba-concept-2"]
        }
      ],
      lab_ngc: `Lab pratique: ${topicTitle}`,
      quiz: `Quiz: ${topicTitle}`,
      project: `Projet: ${topicTitle}`
    };

    const currentDate = new Date().toLocaleString('fr-FR', { timeZone: 'Europe/Paris' });

    // Prompt am√©lior√© fourni par l'utilisateur
    const systemPrompt = `Tu es une IA experte en cr√©ation de contenu p√©dagogique interactif, style Scrimba, pour l'apprentissage du d√©veloppement web. Ton objectif est de g√©n√©rer **trois versions distinctes** d'un JSON conforme au sch√©ma sp√©cifi√© pour une le√ßon donn√©e, bas√© sur les donn√©es fournies dans ${JSON.stringify(lessonData)}. 

Chaque version doit √™tre unique (variations dans le style, la complexit√©, les sc√©narios du projet/lab/challenges), couvrir tous les concepts de la le√ßon, et respecter les dur√©es minimales suivantes :
- Version 1 (Basique) : 3 heures minimum (180 minutes), contenu simple pour d√©butants absolus.
- Version 2 (Interm√©diaire) : 6 heures minimum (360 minutes), contenu enrichi avec exemples complexes.
- Version 3 (Cr√©ative) : 10 heures minimum (600 minutes), contenu cr√©atif avec projets th√©matiques.

Le contenu doit √™tre clair, conversationnel, engageant, et favoriser un apprentissage actif avec des pauses pour des challenges interactifs. Utilise une voix professionnelle, masculine, et motivante, comme un formateur exp√©riment√©.

### Instructions g√©n√©rales :
- **Langue** : Fran√ßais, ton accessible mais technique, adapt√© aux d√©butants.
- **Contexte** : La le√ßon fait partie d'un parcours p√©dagogique structur√© (skill path). Utilise les concepts, vid√©os Scrimba, labs, quiz et projets de ${JSON.stringify(lessonData)}.
- **Validit√©** : Chaque JSON doit √™tre syntaxiquement correct, avec des cha√Ænes √©chapp√©es (ex. : \\n pour les sauts de ligne).
- **Date actuelle** : ${currentDate}

### Dur√©e estim√©e :
- **Version 1** : ‚â•180 min, contenu simple
- **Version 2** : ‚â•360 min, contenu enrichi  
- **Version 3** : ‚â•600 min, contenu cr√©atif

### Trois versions :
- **Version 1 (Basique)** : Style simple, exemples minimalistes, projet/lab accessibles, narrations tr√®s d√©taill√©es.
- **Version 2 (Interm√©diaire)** : Style engageant, exemples riches, projet/lab plus complexes, narrations pratiques.
- **Version 3 (Cr√©ative)** : Style dynamique, exemples th√©matiques, projet/lab avanc√©s, narrations inspirantes.`;

    const userPrompt = `G√©n√®re trois versions compl√®tes d'une le√ßon sur: "${topicTitle}"

Description: ${topicDescription}
${context ? `Contexte suppl√©mentaire: ${context}` : ''}

IMPORTANT: R√©ponds avec un objet JSON contenant exactement 3 versions avec cette structure:
{
  "version1_basique": {
    "version": "1.0",
    "meta": {
      "assumptions": ["D√©butant absolu", "Acc√®s √† un √©diteur de code", "Connexion internet"]
    },
    "executive_summary": "R√©sum√© de la version basique...",
    "lesson": {
      "id": "lesson-v1-${Date.now()}",
      "title": "Titre de la le√ßon - Version Basique",
      "objective": "Objectif p√©dagogique clair",
      "script": [
        {
          "segment": "introduction",
          "narration": "Narration conversationnelle style Scrimba de 3-15 minutes...",
          "code": "// Code d'exemple si pertinent\\nconsole.log('Hello World');",
          "video_reference": "scrimba-intro-1"
        }
      ],
      "interactive_challenges": [
        {
          "id": "challenge-1",
          "title": "Premier d√©fi",
          "instructions": "Instructions claires...",
          "starter_code": "// Code de d√©part\\n",
          "solution_code": "// Solution compl√®te\\n"
        }
      ],
      "lab_ngc": {
        "title": "Lab pratique - Version Basique",
        "instructions": "Instructions d√©taill√©es du lab...",
        "starter_code": "// Code de d√©part du lab\\n",
        "solution_code": "// Solution compl√®te du lab\\n",
        "steps": ["√âtape 1", "√âtape 2", "√âtape 3"]
      },
      "quiz": {
        "multiple_choice": [
          {
            "question": "Question √† choix multiples?",
            "options": ["Option A", "Option B", "Option C", "Option D"],
            "correct_answer": "Option A"
          }
        ],
        "open_ended": {
          "question": "Question ouverte?",
          "sample_answer": "Exemple de r√©ponse"
        }
      },
      "project": {
        "title": "Projet - Version Basique",
        "brief": "Description du projet...",
        "criteria": ["Crit√®re 1", "Crit√®re 2", "Crit√®re 3"],
        "steps": ["√âtape 1", "√âtape 2", "√âtape 3"],
        "line_by_line_explanation": [
          {
            "line": "console.log('Hello');",
            "explanation": "Cette ligne affiche un message"
          }
        ],
        "sample_code": "// Code exemple complet\\nconsole.log('Projet termin√©');"
      },
      "estimated_duration_minutes": 180
    }
  },
  "version2_intermediaire": {
    // Structure similaire mais contenu interm√©diaire, dur√©e 360 minutes
  },
  "version3_creative": {
    // Structure similaire mais contenu cr√©atif, dur√©e 600 minutes
  }
}`;

    console.log('üì° Appel √† l\'API Azure OpenAI...');

    const result = await generateObject({
      model: azure(process.env.AZURE_OPENAI_DEPLOYMENT_NAME!),
      system: systemPrompt,
      prompt: userPrompt,
      schema: ThreeVersionsSchema,
      maxRetries: 2,
      temperature: 0.7,
    });

    console.log('‚úÖ Contenu g√©n√©r√© avec succ√®s');
    const threeVersions = result.object;

    // Convertir au format attendu par le reste de l'application
    const lessonVersions: LessonVersion[] = [
      {
        title: threeVersions.version1_basique.lesson.title,
        duration: threeVersions.version1_basique.lesson.estimated_duration_minutes,
        level: "D√©butant",
        content: threeVersions.version1_basique
      },
      {
        title: threeVersions.version2_intermediaire.lesson.title,
        duration: threeVersions.version2_intermediaire.lesson.estimated_duration_minutes,
        level: "Interm√©diaire",
        content: threeVersions.version2_intermediaire
      },
      {
        title: threeVersions.version3_creative.lesson.title,
        duration: threeVersions.version3_creative.lesson.estimated_duration_minutes,
        level: "Avanc√©",
        content: threeVersions.version3_creative
      }
    ];

    // Validation finale
    if (lessonVersions.length !== 3) {
      throw new Error('Le mod√®le n\'a pas g√©n√©r√© exactement 3 versions de la le√ßon');
    }

    console.log(`üìö ${lessonVersions.length} versions g√©n√©r√©es:`, 
      lessonVersions.map(v => `${v.level} (${v.duration}min)`).join(', ')
    );

    return lessonVersions;
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration:', error);
    throw new Error(`Impossible de g√©n√©rer le contenu de la le√ßon: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}
