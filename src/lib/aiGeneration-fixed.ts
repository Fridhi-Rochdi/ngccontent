import { generateObject } from 'ai';
import { createAzure } from '@ai-sdk/azure';
import { z } from 'zod';

// Configuration du mod√®le Azure OpenAI
const azure = createAzure({
  resourceName: 'nextgen-australia-east',
  apiKey: process.env.AZURE_OPENAI_API_KEY!,
});

// Sch√©ma pour valider le contenu g√©n√©r√©
const ScriptStepSchema = z.object({
  type: z.enum(['introduction', 'concept', 'example', 'exercise', 'conclusion']),
  title: z.string(),
  narrative: z.string(),
  code_example: z.string().optional(),
  visual_aids: z.array(z.string()).optional()
});

const LessonContentSchema = z.object({
  script: z.array(ScriptStepSchema)
});

const LessonVersionSchema = z.object({
  title: z.string(),
  duration: z.number(),
  level: z.string(),
  content: LessonContentSchema
});

export interface LessonVersion {
  title: string;
  duration: number; // en minutes
  level: string;
  content: {
    script: {
      type: 'introduction' | 'concept' | 'example' | 'exercise' | 'conclusion';
      title: string;
      narrative: string;
      code_example?: string;
      visual_aids?: string[];
    }[];
  };
}

/**
 * G√©n√®re le contenu d'une le√ßon avec l'IA Azure OpenAI
 */
export async function generateLessonContent(
  topicTitle: string,
  topicDescription: string,
  context: string = ''
): Promise<LessonVersion[]> {
  console.log('üöÄ G√©n√©ration du contenu pour:', topicTitle);

  try {
    // Prompt d√©taill√© pour la g√©n√©ration de trois versions
    const systemPrompt = `Tu es un expert en cr√©ation de contenu √©ducatif de style Scrimba. 
Tu cr√©es des cours interactifs engageants qui combinent th√©orie pratique, exemples concrets et exercices interactifs.
Tu dois g√©n√©rer EXACTEMENT 3 versions d'une m√™me le√ßon avec des dur√©es et niveaux diff√©rents.

STYLE SCRIMBA REQUIS:
- Narration conversationnelle et engageante
- Exemples pratiques avec du vrai code
- Progression logique: intro ‚Üí concept ‚Üí exemple ‚Üí exercice ‚Üí conclusion
- Ton amical et accessible
- Explications claires avec m√©taphores si n√©cessaire

STRUCTURE OBLIGATOIRE pour chaque version:
1. INTRODUCTION: Pr√©sentation du sujet, pourquoi c'est important
2. CONCEPT: Explication th√©orique claire
3. EXEMPLE: D√©monstration pratique avec code
4. EXERCICE: Challenge interactif pour l'apprenant
5. CONCLUSION: R√©cap et next steps

VERSIONS REQUISES:
- BASIC: 180 minutes, niveau "D√©butant", concepts essentiels
- INTERMEDIATE: 360 minutes, niveau "Interm√©diaire", approfondissement
- CREATIVE: 600 minutes, niveau "Avanc√©", aspects cr√©atifs et avanc√©s`;

    const userPrompt = `G√©n√®re 3 versions compl√®tes d'une le√ßon sur: "${topicTitle}"

Description: ${topicDescription}
${context ? `Contexte suppl√©mentaire: ${context}` : ''}

IMPORTANT: R√©ponds avec un tableau JSON contenant exactement 3 objets avec cette structure:
[
  {
    "title": "Version courte du titre",
    "duration": 180,
    "level": "D√©butant",
    "content": {
      "script": [
        {
          "type": "introduction",
          "title": "Titre de l'introduction",
          "narrative": "R√©cit conversationnel style Scrimba...",
          "code_example": "// Code d'exemple si pertinent",
          "visual_aids": ["Description des √©l√©ments visuels"]
        },
        {
          "type": "concept",
          "title": "Titre du concept principal",
          "narrative": "Explication approfondie...",
          "code_example": "// Code d√©monstratif",
          "visual_aids": ["Diagrammes ou sch√©mas sugg√©r√©s"]
        },
        {
          "type": "example",
          "title": "Exemple pratique",
          "narrative": "D√©monstration step-by-step...",
          "code_example": "// Code complet de l'exemple",
          "visual_aids": ["Screenshots ou animations"]
        },
        {
          "type": "exercise",
          "title": "Challenge interactif",
          "narrative": "Instructions pour l'exercice...",
          "code_example": "// Code de d√©part pour l'exercice",
          "visual_aids": ["Maquettes ou r√©sultats attendus"]
        },
        {
          "type": "conclusion",
          "title": "R√©capitulatif",
          "narrative": "R√©sum√© des points cl√©s...",
          "code_example": "// Code final ou snippet r√©cap",
          "visual_aids": ["R√©sum√© visuel des concepts"]
        }
      ]
    }
  },
  {
    "title": "Version interm√©diaire du titre",
    "duration": 360,
    "level": "Interm√©diaire",
    "content": {
      "script": [
        // M√™me structure mais contenu plus approfondi
      ]
    }
  },
  {
    "title": "Version avanc√©e du titre",
    "duration": 600,
    "level": "Avanc√©",
    "content": {
      "script": [
        // M√™me structure mais contenu cr√©atif et avanc√©
      ]
    }
  }
]`;

    console.log('üì° Appel √† l\'API Azure OpenAI...');

    const result = await generateObject({
      model: azure(process.env.AZURE_OPENAI_DEPLOYMENT_NAME!),
      system: systemPrompt,
      prompt: userPrompt,
      schema: z.array(LessonVersionSchema),
      maxRetries: 2,
      temperature: 0.7,
    });

    console.log('‚úÖ Contenu g√©n√©r√© avec succ√®s');
    const lessonVersions = result.object;

    // Validation finale
    if (!Array.isArray(lessonVersions) || lessonVersions.length !== 3) {
      throw new Error('Le mod√®le n\'a pas g√©n√©r√© exactement 3 versions de la le√ßon');
    }

    console.log(`üìö ${lessonVersions.length} versions g√©n√©r√©es:`, 
      lessonVersions.map(v => `${v.level} (${v.duration}min)`).join(', ')
    );

    return Array.isArray(lessonVersions) ? lessonVersions : [lessonVersions];
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration:', error);
    throw new Error(`Impossible de g√©n√©rer le contenu de la le√ßon: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

export async function generateAllLessonsContent(
  skillPathId: string,
  version: 'basic' | 'creative' | 'advanced' = 'basic'
): Promise<void> {
  // Cette fonction sera impl√©ment√©e pour g√©n√©rer tout le contenu d'un skill path
  // Elle sera appel√©e en arri√®re-plan pour √©viter les timeouts
  console.log(`G√©n√©ration du contenu pour le skill path ${skillPathId} en version ${version}`);
}
