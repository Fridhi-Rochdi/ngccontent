import { z } from 'zod';

// Sch√©mas pour le nouveau format d√©taill√©
const ScriptStepSchema = z.object({
  segment: z.string(),
  narration: z.string(),
  code: z.string().optional(),
  video_reference: z.string()
});

const InteractiveChallengeSchema = z.object({
  id: z.string(),
  title: z.string(),
  instructions: z.string(),
  starter_code: z.string(),
  solution_code: z.string()
});

const LabNGCSchema = z.object({
  title: z.string(),
  instructions: z.string(),
  starter_code: z.string(),
  solution_code: z.string(),
  steps: z.array(z.string())
});

const QuizSchema = z.object({
  multiple_choice: z.array(z.object({
    question: z.string(),
    options: z.array(z.string()),
    correct_answer: z.string()
  })),
  open_ended: z.object({
    question: z.string(),
    sample_answer: z.string()
  })
});

const ProjectSchema = z.object({
  title: z.string(),
  brief: z.string(),
  criteria: z.array(z.string()),
  steps: z.array(z.string()),
  line_by_line_explanation: z.array(z.object({
    line: z.string(),
    explanation: z.string()
  })),
  sample_code: z.string()
});

const LessonContentSchema = z.object({
  id: z.string(),
  title: z.string(),
  objective: z.string(),
  script: z.array(ScriptStepSchema),
  interactive_challenges: z.array(InteractiveChallengeSchema),
  lab_ngc: LabNGCSchema,
  quiz: QuizSchema,
  project: ProjectSchema,
  estimated_duration_minutes: z.number()
});

const LessonVersionSchema = z.object({
  version: z.string(),
  meta: z.object({
    assumptions: z.array(z.string())
  }),
  executive_summary: z.string(),
  lesson: LessonContentSchema
});

// Sch√©ma pour contenir les trois versions
export const ThreeVersionsSchema = z.object({
  version1_basique: LessonVersionSchema,
  version2_intermediaire: LessonVersionSchema,
  version3_creative: LessonVersionSchema
});

export type ThreeVersionsType = z.infer<typeof ThreeVersionsSchema>;

/**
 * Appel direct √† l'API Azure OpenAI
 */
export async function callAzureOpenAI(
  topicTitle: string,
  topicDescription: string,
  skillPathName: string
): Promise<ThreeVersionsType> {
  
  const systemPrompt = `Tu es un expert en cr√©ation de contenu √©ducatif interactif de haute qualit√©, sp√©cialis√© dans la cr√©ation de le√ßons format Scrimba pour des d√©veloppeurs. Tu vas cr√©er du contenu pour la plateforme Next Generation Coding (NGC).

CONTEXTE IMPORTANT :
- Plateforme : Next Generation Coding (NGC)
- Format : Le√ßons interactives style Scrimba
- Public cible : D√©veloppeurs en formation
- Objectif : Cr√©er un contenu engageant, pratique et professionnel

INSTRUCTIONS DE G√âN√âRATION :
Tu dois cr√©er EXACTEMENT 3 versions diff√©rentes de la m√™me le√ßon :

1. VERSION 1 - BASIQUE (version1_basique) :
   - Approche traditionnelle et structur√©e
   - Explications pas √† pas claires
   - Exemples simples et progressifs
   - Parfait pour les d√©butants

2. VERSION 2 - INTERM√âDIAIRE (version2_intermediaire) :
   - Approche plus technique avec concepts avanc√©s
   - Int√©gration de bonnes pratiques
   - Cas d'usage r√©els et pratiques
   - Optimis√© pour les d√©veloppeurs avec exp√©rience

3. VERSION 3 - CR√âATIVE (version3_creative) :
   - Approche innovante et engageante
   - M√©taphores cr√©atives et storytelling
   - D√©fis interactifs avanc√©s
   - Projets cr√©atifs et originaux

STRUCTURE OBLIGATOIRE pour chaque version :

**META INFORMATIONS :**
- assumptions : Liste des pr√©requis techniques et connaissances assum√©es
- executive_summary : R√©sum√© ex√©cutif de 2-3 phrases sur l'approche de cette version

**CONTENU DE LA LE√áON :**

1. **SCRIPT D√âTAILL√â** (minimum 8 segments) :
   - segment : Titre du segment (ex: "Introduction aux concepts")
   - narration : Texte de narration d√©taill√© (200-400 mots)
   - code : Code √† pr√©senter (si applicable)
   - video_reference : Description de ce qui se passe √† l'√©cran

2. **CHALLENGES INTERACTIFS** (minimum 3) :
   - id : Identifiant unique
   - title : Titre du challenge
   - instructions : Instructions claires pour l'apprenant
   - starter_code : Code de d√©part
   - solution_code : Solution compl√®te

3. **LAB NGC** (Laboratoire pratique) :
   - title : Nom du laboratoire
   - instructions : Instructions d√©taill√©es
   - starter_code : Code de base
   - solution_code : Solution finale
   - steps : √âtapes d√©taill√©es (minimum 5)

4. **QUIZ COMPLET** :
   - multiple_choice : 3 questions √† choix multiples avec 4 options chacune
   - open_ended : 1 question ouverte avec exemple de r√©ponse

5. **PROJET FINAL** :
   - title : Nom du projet
   - brief : Description du projet (100-200 mots)
   - criteria : Crit√®res d'√©valuation (minimum 5)
   - steps : √âtapes de r√©alisation (minimum 8)
   - line_by_line_explanation : Explication ligne par ligne du code final (minimum 10 lignes)
   - sample_code : Code complet du projet

**QUALIT√â REQUISE :**
- Contenu technique pr√©cis et √† jour
- Exemples de code fonctionnels
- Narration engageante et professionnelle
- D√©fis progressifs et adapt√©s au niveau
- Projets pratiques et applicables

**DUR√âE ESTIM√âE :**
- Version basique : 45-60 minutes
- Version interm√©diaire : 60-90 minutes  
- Version cr√©ative : 90-120 minutes`;

  const userPrompt = `Cr√©e une le√ßon compl√®te sur le sujet : "${topicTitle}"

Description du sujet : ${topicDescription}

Contexte du parcours : ${skillPathName}

G√©n√®re les 3 versions demand√©es avec tout le contenu d√©taill√© selon la structure sp√©cifi√©e.`;

  const endpoint = `${process.env.AZURE_OPENAI_ENDPOINT!}/openai/deployments/${process.env.AZURE_OPENAI_DEPLOYMENT_NAME!}/chat/completions?api-version=${process.env.AZURE_OPENAI_API_VERSION!}`;

  console.log('üì° Appel direct √† l\'API Azure OpenAI...');
  console.log('üîó URL:', endpoint);

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'api-key': process.env.AZURE_OPENAI_API_KEY!,
      },
      body: JSON.stringify({
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 4000,
        temperature: 0.7,
        response_format: {
          type: 'json_object'
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur API:', response.status, errorText);
      throw new Error(`Azure OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ R√©ponse re√ßue de l\'API');
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Format de r√©ponse invalide de l\'API');
    }

    const content = data.choices[0].message.content;
    const parsedContent = JSON.parse(content);
    
    // Validation avec Zod
    const result = ThreeVersionsSchema.parse(parsedContent);
    
    console.log('üéâ Contenu g√©n√©r√© et valid√© avec succ√®s!');
    return result;

  } catch (error) {
    console.error('üí• Erreur lors de l\'appel API:', error);
    throw error;
  }
}
