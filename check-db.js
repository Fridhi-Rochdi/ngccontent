const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function checkDatabase() {
  try {
    console.log('üîÑ Connexion √† Neon Database...\n');

    // Test de connexion
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie √† la base de donn√©es Neon\n');

    console.log('=== V√âRIFICATION DE LA BASE DE DONN√âES ===\n');

    // V√©rifier les skill paths
    const skillPaths = await prisma.skillPath.findMany({
      include: {
        lessons: {
          include: {
            content: {
              orderBy: { createdAt: 'desc' }
            }
          }
        }
      }
    });

    console.log(`üìö Nombre de parcours trouv√©s: ${skillPaths.length}`);

    skillPaths.forEach((skillPath, index) => {
      console.log(`\n--- Parcours ${index + 1}: ${skillPath.name} ---`);
      console.log(`ID: ${skillPath.id}`);
      console.log(`Statut: ${skillPath.status}`);
      console.log(`Le√ßons: ${skillPath.lessons.length}`);

      skillPath.lessons.forEach((lesson, lessonIndex) => {
        console.log(`\n  üìñ Le√ßon ${lessonIndex + 1}: ${lesson.title}`);
        console.log(`     ID: ${lesson.id}`);
        console.log(`     Statut: ${lesson.status}`);
        console.log(`     Versions de contenu: ${lesson.content.length}`);

        lesson.content.forEach((content, contentIndex) => {
          console.log(`\n    üìÑ Version ${contentIndex + 1}:`);
          console.log(`       ID: ${content.id}`);
          console.log(`       Version: ${content.version}`);
          console.log(`       S√©lectionn√©e: ${content.isSelected}`);
          console.log(`       Cr√©√©e le: ${new Date(content.createdAt).toLocaleString('fr-FR')}`);

          // Afficher un aper√ßu du contenu
          const contentData = content.content;
          if (contentData && typeof contentData === 'object') {
            const data = contentData;
            console.log(`       üìù Script: ${data.script?.length || 0} sections`);
            console.log(`       üß† Quiz: ${data.quiz?.questions?.length || 0} questions`);
            console.log(`       üéØ Projet: ${data.project ? 'Oui' : 'Non'}`);
            console.log(`       üõ†Ô∏è Exercices: ${data.lab_exercises?.length || 0}`);
            console.log(`       üéì BAC: ${data.correction_bac ? 'Oui' : 'Non'}`);
          } else {
            console.log(`       ‚ö†Ô∏è Contenu non structur√© ou vide`);
          }
        });
      });
    });

    // Chercher un contenu sp√©cifique pour voir sa structure
    const specificLesson = await prisma.lesson.findUnique({
      where: { id: '0f1be142-fd95-4865-b3c9-557f77fc2a1f' }, // Le√ßon avec contenu du parcours 37
      include: {
        content: true
      }
    });

    if (specificLesson && specificLesson.content.length > 0) {
      console.log('\n=== STRUCTURE D√âTAILL√âE DU CONTENU ===');
      console.log('Le√ßon:', specificLesson.title);
      console.log('Contenu brut:', JSON.stringify(specificLesson.content[0].content, null, 2));
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de la base de donn√©es:', error);
    console.error('D√©tails de l\'erreur:', error.message);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå D√©connexion de la base de donn√©es');
  }
}

checkDatabase();
